# СПИСОК - изменяемый тип данных
# может содержать любые значения одновременно, в том числе другие списки любой степени вложения
# список в списке в списке в списке
first_list = [9, 'fgdf', True, [1, 2, 3]]


# имеются встроенные методы
print(first_list)

first_list = [1, 5, 8, 24, -5, 9]
# .pop - реализация стека
# .sort - можно сортировать только однотипные списки

first_list.sort()
print(first_list)

first_list.sort()
print(first_list.sort())
# print(first_list.sorted)

# sorted не меняет начальный список, выводит сортированный список
# copy копирует список, но без вложений других списков, если они были элементами первоначального списка

# =====================
# МНОЖЕСТВО = сожержит уникальные элементы
# set - множество
# это изменяемый тип данных
# difference - вычитание множеств ()
# simmetrical_difference -симметричная разность между множествами (всё, кроме общего)
# intersection - только общее
# issubset - является ли одно множество подмножеством другого


# КОРТЕЖИ - неизменяемые
# могут хранить разные данные

first_typle = [9, 'fgdf', True, [1, 2, 3]]

# можно посчитать и получить элемент с каким-то индексом
# ПРИМЕНЕНИЕ:
# - данные из бд на этапе загрузки
# - лог пароль
# - апи ключи
# - всё, чему нужно гарантировать неизменяемость

# ЗАДАЧА СОБЕСЕДОВАНИЕ
# почистить список от дубликатов

a = [1,1,1,1,1,5,5,5,5,5,7,4,7,8,8,8,8,7,7,4,4,5,5]
print(list(set(a)))
print(len(list(set(a))))
# превратить в множество и превратить обратно в список
# возвращает [1, 4, 5, 7, 8] КРУТОООООО !!!!!

# СЛОВАРИ ======================
# пара КЛЮЧ - ЗНАЧЕНИЕ

first_dict = {'Mother': 123456789, 'Father': 987654321, 'Friend': 102030405}

# mother = ключ
# ключ - неизменяемый тип данный

for key in first_dict:
    print(first_dict[key], end=', ') # выводит список значений
print()

# используется, например, для конфига, json

second_dict = first_dict.copy

print(first_dict.get('Mother'))
print(first_dict.clear())
print()

# сдвинуть 

list_1 = [1,2,3,4,5,6,7,8,9,0]
k = 3

print(len(list_1))
print(list_1[k:] + list_1[:k])

# ========================================================================================
# дан массив, состояний из целых чисел. Напишите программу, которая подсчитает количество 
# элементов списка, бОльших предыдущего (элемента с предыдущим номером)
print("====")
list_1020 = [0, -1, 5, 2, 3, 9, 12, 5, 8]
countBigger = 0

for i in range(len(list_1020) - 2):
    if list_1020[i + 1] > list_1020[i]:
        countBigger +=1
print(list_1020)
print(countBigger)

# List comprehension = ввод списка от пользователя в одну строку
# фишка ПИТОНа
# int(a) сразу преобразует введённые данные в число
# split() с указанием разделителя *по умолчанию - пробел* разделяет строку на элементы списка 
# if - накладывает условие на помещение введенного значения в собираемвй список 
# (если меньше нуля, то значение в список не попадает)
a = [int(a) for a in input().split() if int(a) > 0]
print(a)